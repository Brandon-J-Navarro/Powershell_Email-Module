name: Build, Package, and Release .NET Framework 4.7.2

on:
  # pull_request:
  #   types: [closed]
  #   branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.TOKEN }}

      - name: Setup MSBuild path
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Restore NuGet packages
        run: nuget restore .\EmailLibraryDesktop\EmailLibrary.sln

      - name: Build project
        run: |
          msbuild .\EmailLibraryDesktop\EmailLibrary.sln /p:Configuration=Release /p:Platform="Any CPU" /p:TargetFrameworkVersion="v4.7.2"

      - name: Create directories
        run: |
          mkdir release
          mkdir .\release\lib
          mkdir .\release\lib\Core
          mkdir .\release\lib\Desktop

      - name: Copy build output to library directory
        run: |
          $files = @()
          Get-ChildItem -path ".\EmailLibraryDesktop\EmailLibrary\bin\Release\" -Recurse | Where-Object Extension -EQ '.dll' | ForEach-Object {
            Try {
              Get-FileHash $_ -Algorithm SHA256 | FL | Out-File -FilePath ".\Hashes.txt" -Append
              Copy-Item $_ -Destination ".\release\lib\Desktop\"
              $files += $_.Name
            } Catch {
              Write-Warning "Could not load assembly: $_"
            }
          }

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore .\EmailLibraryDesktop\EmailLibrary\EmailLibrary.csproj

      - name: Build project
        run: dotnet build --source .\EmailLibraryCore\EmailLibrary.sln --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish .\EmailLibraryDesktop\EmailLibrary\EmailLibrary.csproj --configuration Release --no-restore --output publish
        env:
            PublishRelease: true

      - name: Generate Powershell Manifest
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $moduleSettings = @{
            Path = '.\EmailModule\EmailModule.psd1'
            # Script module or binary module file associated with this manifest.
            RootModule = 'EmailModule.psm1'

            # Version number of this module.
            ModuleVersion = $version
            # Supported PSEditions
            CompatiblePSEditions = @('Desktop','Core')

            # ID used to uniquely identify this module
            GUID = '6f8c4c8a-6e0d-4139-836c-f798b30ada92'

            # Author of this module
            Author = 'Brandon Navarro'

            # Company or vendor of this module
            CompanyName = 'None'

            # Copyright statement for this module
            Copyright = '(c) Brandon Navarro. All rights reserved.'

            # Description of the functionality provided by this module
            Description = 'Powershell Module to send Email using MailKit, MimeKit and STARTTLS'

            # Minimum version of the PowerShell engine required by this module
            PowerShellVersion = '5.1'

            # Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
            DotNetFrameworkVersion = '4.7.2'

            # Processor architecture (None, X86, Amd64) required by this module
            ProcessorArchitecture = 'Amd64'

            # Script files (.ps1) that are run in the caller's environment prior to importing this module.
            ScriptsToProcess = @()

            # Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
            FunctionsToExport = 'Send-Email'

            # Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
            CmdletsToExport = 'Send-Email'

            # Variables to export from this module
            VariablesToExport = @()

            # Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
            AliasesToExport = @()

            # List of all modules packaged with this module
            ModuleList = 'EmailModule.psm1'

            # List of all files packaged with this module
            FileList = $files

            # Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
            PrivateData = @{
              PSData = @{
                # Tags applied to this module. These help with module discovery in online galleries.
                Tags = @('Desktop','Core','Email','StartTLS')

                # A URL to the license for this module.
                LicenseUri = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module/blob/main/LICENSE'

                # A URL to the main website for this project.
                ProjectUri = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module'

                # A URL to an icon representing this module.
                # IconUri = ''

                # ReleaseNotes of this module
                # ReleaseNotes = ''

                # Prerelease string of this module
                # Prerelease = ''

                # Flag to indicate whether the module requires explicit user acceptance for install/update/save
                # RequireLicenseAcceptance = $false

                # External dependent modules of this module
                # ExternalModuleDependencies = @()
              } # End of PSData hashtable
            } # End of PrivateData hashtable
          }
          New-ModuleManifest @moduleSettings

      - name: Copy powershell module to release directory
        run: |
          Get-FileHash -Path ".\EmailModule\EmailModule.psd1" -Algorithm SHA256 | FL | Out-File -FilePath ".\Hashes.txt" -Append
          Copy-Item -Path ".\EmailModule\EmailModule.psd1" -Destination ".\release\"
          Get-FileHash -Path ".\EmailModule\EmailModule.psm1" -Algorithm SHA256 | FL | Out-File -FilePath ".\Hashes.txt" -Append
          Copy-Item -Path ".\EmailModule\EmailModule.psm1" -Destination ".\release\"

      - name: Zip the release directory
        run: |
          Compress-Archive -Path ".\release\*" -DestinationPath "EmailModule.zip"
          Get-ChildItem -Recurse | Select-Object FullName | Out-File -FilePath ".\Files.txt"

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1.20.0
        with:
          artifacts: EmailModule.zip,Hashes.txt,Files.txt
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      # - name: Publish module to PowerShell Gallery
      #   run: |
      #     Publish-Module -Path ./YourModuleName -NugetApiKey '${{ secrets.PS_GALLERY_API_KEY }}' -Force # Adjust path to your module directory
