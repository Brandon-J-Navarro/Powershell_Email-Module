name: Build and Test PowerShell Module

on:
  push:
    branches: [ 'testing' ]
    paths:
      - 'EmailModule/**'
      - 'EmailLibraryDesktop/**'
      - 'EmailLibraryCore/**'
      - 'tests/**'
      - '!.github/workflows/**'
      - '!README.md'
      - '!.wiki/**'

  # pull_request:
  #   branches: [ testing ]
  #   types: [closed]
  #   paths:
  #     - 'EmailModule/**'
  #     - 'EmailLibraryDesktop/**'
  #     - 'EmailLibraryCore/**'
  #     - 'tests/**'
  #     - '!.github/workflows/**'
  #     - '!README.md'
  #     - '!.wiki/**'


  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    environment: Build and Test PowerShell Module
    runs-on: windows-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.TOKEN }}

      - name: Setup MSBuild .NET Framework Build
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Setup NuGet .NET Framework Build
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Restore NuGet packages for .NET Framework Build
        run: nuget restore .\EmailLibraryDesktop\EmailLibrary.sln

      - name: Build .NET Framework project
        run: |
          msbuild .\EmailLibraryDesktop\EmailLibrary.sln /p:Configuration=Release /p:Platform="Any CPU" /p:TargetFrameworkVersion="v4.7.2"

      - name: Create release directories
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          New-Item -ItemType Directory -Path release | Out-Null;
          New-Item -ItemType Directory -Path .\release\EmailModule | Out-Null;
          New-Item -ItemType Directory -Path .\release\EmailModule\$version | Out-Null;
          New-Item -ItemType Directory -Path .\release\EmailModule\$version\lib | Out-Null;
          New-Item -ItemType Directory -Path .\release\EmailModule\$version\lib\net8.0 | Out-Null;
          New-Item -ItemType Directory -Path .\release\EmailModule\$version\lib\net472 | Out-Null;

      - name: Copy .NET Framework build output to lib Desktop directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          Get-ChildItem -path ".\EmailLibraryDesktop\EmailLibrary\bin\Release\" -Recurse -Exclude "*.pdb" | ForEach-Object {
            Copy-Item $_ -Destination ".\release\EmailModule\$version\lib\net472\"
          }

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies .NET Core Build
        run: dotnet restore .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj

      - name: Build .NET Core project
        run: dotnet build .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj --configuration Release --no-restore

      - name: Publish .NET Core project
        run: dotnet publish .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj --configuration Release --no-restore --output publish
        env:
            PublishRelease: true

      - name: Copy .NET Core publish output to lib Core directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          Get-ChildItem -path ".\publish\" -Exclude "*.pdb" | Where-Object Attributes -ne Directory | ForEach-Object {
            Copy-Item $_ -Destination ".\release\EmailModule\$version\lib\net8.0\"
          }

      - name: Generate Powershell Manifest
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''

          $files = @('.\EmailModule.psd1','.\EmailModule.psm1','.\EmailModule.Libraries.ps1',".\EmailModule.nuspec",".\EmailModule.$version.nupkg")
          Get-ChildItem -Path ".\release\EmailModule\$version\" -Recurse -File | ForEach-Object { 
              $files += $_.FullName.ToString().Replace("D:\a\Powershell_Email-Module\Powershell_Email-Module\release\EmailModule\$version",'.') 
          }

          $moduleSettings = @{
            Path = '.\EmailModule\EmailModule.psd1'

            # Script module or binary module file associated with this manifest.
            RootModule = 'EmailModule.psm1'

            # Version number of this module.
            ModuleVersion = $version

            # Supported PSEditions
            CompatiblePSEditions = @('Desktop','Core')

            # ID used to uniquely identify this module
            GUID = '6f8c4c8a-6e0d-4139-836c-f798b30ada92'

            # Author of this module
            Author = 'Brandon Navarro'

            # Company or vendor of this module
            CompanyName = 'None'

            # Copyright statement for this module
            Copyright = '(c) Brandon Navarro. All rights reserved.'

            # Description of the functionality provided by this module
            Description = 'Powershell Module to send Email using MailKit, MimeKit and STARTTLS'

            # Minimum version of the PowerShell engine required by this module
            PowerShellVersion = '5.1'

            # Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
            DotNetFrameworkVersion = '4.7.2'

            # Processor architecture (None, X86, Amd64) required by this module
            ProcessorArchitecture = 'None'

            # Script files (.ps1) that are run in the caller's environment prior to importing this module.
            ScriptsToProcess = @('EmailModule.Libraries.ps1')

            # Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
            FunctionsToExport = 'Send-Email'

            # Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
            CmdletsToExport = 'Send-Email'

            # Variables to export from this module
            VariablesToExport = @()

            # Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
            AliasesToExport = @()

            # List of all files packaged with this module
            FileList = $files

            # Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
            Tags        = @('Desktop','Core','Email','StartTLS')
            LicenseUri  = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module/blob/main/LICENSE'
            ProjectUri  = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module'
            IconUri     = 'https://github.com/Brandon-J-Navarro/'
            ReleaseNotes = 'Visit GitHub repo for release note / change log'
          }
          New-ModuleManifest @moduleSettings

      - name: Copy powershell module and misc. files to release directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          Copy-Item -Path ".\EmailModule\EmailModule.Libraries.ps1" -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\EmailModule\EmailModule.psd1" -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\EmailModule\EmailModule.psm1" -Destination ".\release\EmailModule\$version\"
          # Copy-Item -Path ".\Tests\" -Recurse -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\README.md" -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\LICENSE" -Destination ".\release\EmailModule\$version\"

      - name: Generate nuspec
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
            <metadata>
              <id>EmailModule</id>
              <version>$version</version>
              <title>EmailModule</title>
              <authors>Brandon Navarro</authors>
              <owners>Brandon Navarro</owners>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <license type="file">LICENSE</license>
              <projectUrl>https://github.com/Brandon-J-Navarro/Powershell_Email-Module</projectUrl>
              <repository type="git" url="https://github.com/Brandon-J-Navarro/Powershell_Email-Module.git" branch="main"/>
              <description>Powershell Module to send Email using MailKit, MimeKit and STARTTLS</description>
              <summary>A brief summary of your module.</summary>
              <releaseNotes>Visit GitHub repo for release note / change log</releaseNotes>
              <readme>README.md</readme>
              <copyright>(c) Brandon Navarro. All rights reserved.</copyright>
              <tags>Desktop Core Email StartTLS</tags>
              <dependencies>
                <group targetFramework=".NETFramework4.7.2">
                  <dependency id="BouncyCastle.Cryptography" version="2.0.0.0" />
                  <dependency id="EmailLibrary" version="1.0.0.0" />
                  <dependency id="MailKit" version="4.14.0.0" />
                  <dependency id="MimeKit" version="4.14.0.0" />
                  <dependency id="System.Buffers" version="4.0.4.0" />
                  <dependency id="System.Formats.Asn1" version="8.0.0.1" />
                  <dependency id="System.Memory" version="4.0.2.0" />
                  <dependency id="System.Numerics.Vectors" version="4.1.5.0" />
                  <dependency id="System.Runtime.CompilerServices.Unsafe" version="6.0.1.0" />
                  <dependency id="System.Threading.Tasks.Extensions" version="4.2.1.0" />
                  <dependency id="System.ValueTuple" version="4.0.3.0" />
                </group>
                <group targetFramework="net8.0">
                  <dependency id="BouncyCastle.Cryptography" version="2.0.0.0" />
                  <dependency id="EmailLibrary" version="1.0.0.0" />
                  <dependency id="MailKit" version="4.14.1" />
                  <dependency id="MimeKit" version="4.14.0" />
                  <dependency id="System.Security.Cryptography.Pkcs" version="8.0.0.0" />
                </group>
              </dependencies>
            </metadata>
            <files>
              <file src=".\**" target="\" />
            </files>
          </package>
          "@ | Out-File -FilePath ".\release\EmailModule\$version\EmailModule.nuspec"

      - name: Build NuGet Package
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          nuget pack .\release\EmailModule\$version\EmailModule.nuspec -Properties Configuration=Release

      - name: Publish NuGet Package
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-testing.*", ''
          Copy-Item -Path ".\EmailModule.$version.nupkg" -Destination ".\release\EmailModule\$version\"
          New-Item -ItemType Directory -Path 'artifact' | Out-Null;
          Copy-Item -Recurse -Force .\release\EmailModule\$version\* .\artifact\
          Get-ChildItem -path ".\artifact\" -Recurse -File | ForEach-Object {
            Get-FileHash -LiteralPath $_.FullName -Algorithm SHA256 | FL | Out-File -FilePath ".\artifact\Hashes.txt" -Append
          }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: EmailModule
          path: artifact/
          if-no-files-found: error

  # Integration Tests
  integration-test-core:
    environment: Build and Test PowerShell Module
    runs-on: ${{ matrix.os }}
    name: Integration Test on ${{ matrix.os }}
    needs: [build]
    continue-on-error: true
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest,macos-15-intel,macos-latest]
        # os: [ubuntu-latest, windows-latest,macos-15-intel]
        os: [ubuntu-latest, windows-latest]
    env:
      OUTPUT1: ${{ needs.build.outputs.new_tag }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: EmailModule
          path: EmailModule

      - name: Verify module manifest
        shell: pwsh
        run: |
          Test-ModuleManifest -Path '.\EmailModule\EmailModule.psd1'

      - name: Integration Test - Original Full Parameters (UserPass Parameter Set)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Integration Test Recipient"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "GitHub Actions Bot"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Original Full Parameters Test"
          $Body = "
            Integration Test - Email Module (Original Full Parameters)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            ToName = $ToName
            From = ${{ secrets.AUTHUSER }}
            FromName = $FromName
            Subject = $Subject

            This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }} with all parameters.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          $ServerPort = "587"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer -SmtpPort $ServerPort

      - name: Integration Test - PSCredential Parameter Set
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $Username = "${{ secrets.AUTHUSER }}"
          $Password = "${{ secrets.AUTHPASS }}" | ConvertTo-SecureString -AsPlainText -Force
          $Credential = New-Object System.Management.Automation.PSCredential($Username, $Password)
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - PSCredential Test"
          $Body = "
            Integration Test - Email Module (PSCredential Authentication)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            From = ${{ secrets.AUTHUSER }}
            Subject = $Subject

            This test uses PSCredential for authentication.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -Credential $Credential `
              -EmailTo $To -EmailFrom $From `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - SecureString Password
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $SecurePass = "${{ secrets.AUTHPASS }}" | ConvertTo-SecureString -AsPlainText -Force
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - SecureString Test"
          $Body = "
            Integration Test - Email Module (SecureString Password)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            From = ${{ secrets.AUTHUSER }}
            Subject = $Subject

            This test uses SecureString for password authentication.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $SecurePass `
              -EmailTo $To -EmailFrom $From `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Multiple Recipients (To/CC)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }};${{ secrets.BCC }}"
          $ToName = "Primary Recipient;Secondary Recipient"
          $Cc = "${{ secrets.CC }}"
          $CcName = "CC Recipient"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "Multi-Recipient Test"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Multiple Recipients Test"
          $Body = "
            Integration Test - Email Module (Multiple Recipients)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }};${{ secrets.BCC }}
            ToName = $ToName
            Cc = ${{ secrets.CC }}
            CcName = $CcName
            From = ${{ secrets.AUTHUSER }}
            FromName = $FromName
            Subject = $Subject

            This test validates multiple To and CC recipients with display names.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailCc $Cc -CcName $CcName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Priority and Importance
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $EmailPriority = "Urgent"
          $EmailImportance = "High"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Priority Test"
          $Body = "
            Integration Test - Email Module (Priority and Importance)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            From = ${{ secrets.AUTHUSER }}
            Subject = $Subject
            EmailPriority = $EmailPriority 
            EmailImportance = $EmailImportance

            This test validates email priority (Urgent) and importance (High) settings.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailFrom $From `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer `
              -EmailPriority $EmailPriority -EmailImportance $EmailImportance

      - name: Integration Test - Minimal Parameters (Subject Only)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Minimal Test (Subject Only)"
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailFrom $From -Subject $Subject `
              -SmtpServer $MailServer

      - name: Integration Test - Minimal Parameters (Body Only)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $Body = "
            Integration Test - Email Module (Body Only - No Subject)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            From = ${{ secrets.AUTHUSER }}

            This test validates emails with body content but no subject line.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailFrom $From -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Name Mismatch Fallback
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }};${{ secrets.CC }};${{ secrets.BCC }}"
          $ToName = "Recipient One;Recipient Two"
          $From = "${{ secrets.AUTHUSER }}"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Name Mismatch Test"
          $Body = "
            Integration Test - Email Module (Name Mismatch Fallback)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }};${{ secrets.CC }};${{ secrets.BCC }}
            ToName = $ToName
            From = ${{ secrets.AUTHUSER }}
            Subject = $Subject

            This test validates fallback behavior when recipient name count doesn't match email count.
            Should use email addresses as display names when counts don't match.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailFrom $From -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Case Insensitive Priority/Importance
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $From = "${{ secrets.AUTHUSER }}"
          $EmailPriority = "urgent"
          $EmailImportance = "low"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Case Insensitive Test"
          $Body = "
            Integration Test - Email Module (Case Insensitive Validation)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            From = ${{ secrets.AUTHUSER }}
            Subject = $Subject
            EmailPriority = $EmailPriority
            EmailImportance = $EmailImportance

            This test validates case-insensitive priority and importance parameters.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailFrom $From `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer `
              -EmailPriority $EmailPriority -EmailImportance $EmailImportance

      - name: Integration Test - BCC Recipients
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Primary Recipient"
          $Bcc = "${{ secrets.BCC }}"
          $BccName = "BCC Test Recipient"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "BCC Test Sender"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - BCC Test"
          $Body = "
            Integration Test - Email Module (BCC Recipients)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            ToName = $ToName
            Bcc = ${{ secrets.BCC }}
            BccName = $BccName
            From = ${{ secrets.AUTHUSER }}
            FromName = $FromName
            Subject = $Subject

            This test validates BCC functionality. The BCC recipient should receive this email
            but not be visible to the TO recipient. BCC sent to: ${{ secrets.BCC }}

          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailBcc $Bcc -BccName $BccName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Multiple BCC Recipients
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Primary Recipient"
          $Bcc = "${{ secrets.BCC }};${{ secrets.CC }}"
          $BccName = "BCC Recipient 1;BCC Recipient 2"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "Multiple BCC Test"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Multiple BCC Test"
          $Body = "
            Integration Test - Email Module (Multiple BCC Recipients)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            This test validates multiple BCC functionality with semicolon separation.

            To = ${{ secrets.TO }}
            ToName = $ToName
            Bcc = ${{ secrets.BCC }};${{ secrets.CC }}
            BccName = $BccName
            From = ${{ secrets.AUTHUSER }}
            FromName = $FromName
            Subject = $Subject

            **VALIDATION**: All BCC recipients should receive this email but not see each other
            in the recipient headers. Only the TO recipient should be visible.
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailBcc $Bcc -BccName $BccName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - Complete Recipients (TO/CC/BCC)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Primary Recipient"
          $Cc = "${{ secrets.CC }}"
          $CcName = "CC Recipient"
          $Bcc = "${{ secrets.BCC }};${{ secrets.AUTHUSER }}"
          $BccName = "BCC Recipient 1;BCC Recipient 2"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "Complete Test Sender"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Complete Recipients Test"
          $Body = "
            Integration Test - Email Module (Complete Recipients: TO/CC/BCC)

            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition

            To = ${{ secrets.TO }}
            ToName = $ToName
            Cc = ${{ secrets.CC }}
            CcName = $CcName
            Bcc = ${{ secrets.BCC }};${{ secrets.AUTHUSER }}
            BccName = $BccName
            From = ${{ secrets.AUTHUSER }}
            FromName = $FromName
            Subject = $Subject

            **VALIDATION**:
            - TO and CC recipients should see each other in headers
            - BCC recipients should NOT be visible to TO/CC recipients
            - All recipients should receive the email
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailCc $Cc -CcName $CcName `
              -EmailBcc $Bcc -BccName $BccName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer

      - name: Integration Test - All Parameters (Complete Feature Test)
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $EmailTo = "${{ secrets.TO }};${{ secrets.AUTHUSER }}"
          $EmailToName = "Primary Test Recipient;Secondary Test Recipient"
          $EmailFrom = "${{ secrets.AUTHUSER }}"
          $EmailFromName = "GitHub Actions Integration Test"
          $SmtpServer = "${{ secrets.MAILSERVER }}"
          $SmtpPort = 587
          $EmailCc = "${{ secrets.CC }}"
          $CcName = "CC Integration Test Recipient"
          $EmailBcc = "${{ secrets.BCC }};${{ secrets.AUTHUSER }}"
          $BccName = "BCC Test Recipient 1;BCC Test Recipient 2"
          $EmailPriority = "Urgent"
          $EmailImportance = "High"
          $Subject = "GitHub Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - ALL PARAMETERS TEST"
          $Body = "
            Integration Test - Email Module (ALL PARAMETERS TEST)

            Test Environment:
            =================
            Linux: $Linux
            MacOS: $MacOS  
            Windows: $Windows
            PSEdition: $PSEdition
            Build Tag: ${{ needs.build.outputs.new_tag }}
            OS Matrix: ${{ matrix.os }}

            This comprehensive test validates ALL available parameters:
            ========================================================

            ✓ AuthUser: ${{ secrets.AUTHUSER }}
            ✓ AuthPass: [SECURED]
            ✓ EmailTo: ${{ secrets.TO }};${{ secrets.AUTHUSER }}
            ✓ EmailToName: $EmailToName
            ✓ EmailFrom: ${{ secrets.AUTHUSER }}
            ✓ EmailFromName: $EmailFromName
            ✓ Subject: $Subject
            ✓ Body: This detailed message body
            ✓ SmtpServer: ${{ secrets.MAILSERVER }}
            ✓ SmtpPort: $SmtpPort (STARTTLS)
            ✓ EmailCc: ${{ secrets.CC }}
            ✓ CcName: $CcName
            ✓ EmailBcc: ${{ secrets.BCC }};${{ secrets.AUTHUSER }}
            ✓ BccName: $BccName
            ✓ EmailAttachment: Test attachment file
            ✓ EmailPriority: $EmailPriority
            ✓ EmailImportance: $EmailImportance


            Validation Checklist:
            ====================
            [ ] TO recipients received email with proper display names
            [ ] CC recipients visible in headers to TO recipients
            [ ] BCC recipients received email but NOT visible in headers
            [ ] Email shows high priority/importance flags
            [ ] Test attachment file is present and accessible
            [ ] All display names rendered correctly
            [ ] Email formatting preserved
          
            This email tests the complete functionality of the EmailModule
            with every available parameter populated and functional.
          "

          # Create a test attachment file
          $EmailAttachment = "integration-test-attachment.txt"
          $AttachmentContent = @"
            GitHub Actions Integration Test Attachment
            ==========================================
            
            Test Details:
            - Build Tag: ${{ needs.build.outputs.new_tag }}
            - OS: ${{ matrix.os }}
            - PowerShell Edition: $PSEdition
            - Test Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
            
            Environment:
            - Linux: $Linux
            - macOS: $MacOS
            - Windows: $Windows
            
            This file validates the EmailAttachment parameter functionality.
            If you can read this content, the attachment feature is working correctly.
            
            File created during automated integration testing.
          "@

          # Create the test attachment file
          $AttachmentContent | Out-File -FilePath $EmailAttachment -Encoding UTF8

          # Execute the Send-Email command with ALL parameters
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $EmailTo -EmailToName $EmailToName `
              -EmailFrom $EmailFrom -EmailFromName $EmailFromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $SmtpServer -SmtpPort $SmtpPort `
              -EmailCc $EmailCc -CcName $CcName `
              -EmailBcc $EmailBcc -BccName $BccName `
              -EmailPriority $EmailPriority -EmailImportance $EmailImportance
              ##### -EmailAttachment $EmailAttachment ##### (still needs implementing)
          
          # Cleanup test file
          if (Test-Path $EmailAttachment) {
              Remove-Item $EmailAttachment -Force
              Write-Host "Test attachment file cleaned up successfully"
          }

      - name: PowerShell Desktop Original Full Parameters (UserPass Parameter Set)
        shell: pwsh
        run: |
          if ($IsWindows){
            powershell -command {
              Import-Module .\EmailModule\EmailModule.psm1
              $AuthUser = "${{ secrets.AUTHUSER }}"
              $AuthPass = "${{ secrets.AUTHPASS }}"
              $To = "${{ secrets.TO }}"
              $ToName = "Brandon Navarro"
              $From = "${{ secrets.AUTHUSER }}"
              $FromName = "Brandon Navarro"
              $Subject = "Github Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Integration Test"
              $Body = "
                Integration Test - dotNET Framework Email Module

                PSEdition: $PSEdition

                To = ${{ secrets.TO }}
                ToName = $ToName
                From = ${{ secrets.AUTHUSER }}
                FromName = $FromName
                Subject = $Subject

                This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }} Full Parameters
              "
              $MailServer = "${{ secrets.MAILSERVER }}"
              $ServerPort = "587"
              Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
                  -EmailTo $To -EmailToName $ToName `
                  -EmailFrom $From -EmailFromName $FromName `
                  -Subject $Subject -Body $Body `
                  -SmtpServer $MailServer -SmtpPort $ServerPort
            }
          } else {
            write-host "Not windows"
          }





  # integration-test-desktop:
  #   environment: Build and Test PowerShell Module
  #   runs-on: windows-latest
  #   name: Integration Test on Windows Desktop
  #   needs: [build]
  #   env:
  #     OUTPUT1: ${{ needs.build.outputs.new_tag }}
  #   steps:
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v5.0.0
  #       with:
  #         name: EmailModule
  #         path: EmailModule

  #     - name: Integration Test Module with PowerShell Desktop Full Parameters
  #       shell: powershell
  #       run: |
  #         Import-Module .\EmailModule\EmailModule.psm1
  #         $AuthUser = "${{ secrets.AUTHUSER }}"
  #         $AuthPass = "${{ secrets.AUTHPASS }}"
  #         $To = "${{ secrets.TO }}"
  #         $ToName = "Brandon Navarro"
  #         $From = "${{ secrets.AUTHUSER }}"
  #         $FromName = "Brandon Navarro"
  #         $Subject = "Github Actions ${{ needs.build.outputs.new_tag }} windows-latest PSEdition: $PSEdition - Integration Test"
  #         $Body = "
  #           Integration Test - dotNET Framework Email Module

  #           PSEdition: $PSEdition

  #           This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }} Full Parameters
  #         "
  #         $MailServer = "${{ secrets.MAILSERVER }}"
  #         $ServerPort = "587"
  #         Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
  #             -EmailTo $To -EmailToName $ToName `
  #             -EmailFrom $From -EmailFromName $FromName `
  #             -Subject $Subject -Body $Body `
  #             -SmtpServer $MailServer -SmtpPort $ServerPort

  #     - name: Integration Test Module with PowerShell Desktop Limited Parameters 1
  #       shell: powershell
  #       run: |
  #         Import-Module .\EmailModule\EmailModule.psm1
  #         $AuthUser = "${{ secrets.AUTHUSER }}"
  #         $AuthPass = "${{ secrets.AUTHPASS }}"
  #         $To = "${{ secrets.TO }}"
  #         $From = "${{ secrets.AUTHUSER }}"
  #         $Subject = "Github Actions ${{ needs.build.outputs.new_tag }} windows-latest PSEdition: $PSEdition - Integration Test"

  #         $MailServer = "${{ secrets.MAILSERVER }}"
  #         $ServerPort = "587"
  #         Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
  #             -EmailTo $To -EmailFrom $From -Subject $Subject `
  #             -SmtpServer $MailServer -SmtpPort $ServerPort

  #     - name: Integration Test Module with PowerShell Desktop Limited Parameters 2
  #       shell: powershell
  #       run: |
  #         Import-Module .\EmailModule\EmailModule.psm1
  #         $AuthUser = "${{ secrets.AUTHUSER }}"
  #         $AuthPass = "${{ secrets.AUTHPASS }}"
  #         $To = "${{ secrets.TO }}"
  #         $From = "${{ secrets.AUTHUSER }}"
  #         $Body = "
  #           Integration Test - dotNET Framework Email Module

  #           PSEdition: $PSEdition

  #           This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }} Limited Parameters 2
  #         "
  #         $MailServer = "${{ secrets.MAILSERVER }}"
  #         $ServerPort = "587"
  #         Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
  #             -EmailTo $To -EmailFrom $From -Body $Body `
  #             -SmtpServer $MailServer -SmtpPort $ServerPort
