name: Build and Test PowerShell Module

on:
  push:
    paths:
      - 'EmailModule/**'
      - 'EmailLibraryDesktop/**'
      - 'EmailLibraryCore/**'
      - 'tests/**'
      - '!.github/workflows/**'
      - '!README.md'
      - '!.wiki/**'
    branches: [ working ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    environment: Build and Test PowerShell Module
    runs-on: windows-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.TOKEN }}

      - name: Setup MSBuild .NET Framework Build
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Setup NuGet .NET Framework Build
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Restore NuGet packages for .NET Framework Build
        run: nuget restore .\EmailLibraryDesktop\EmailLibrary.sln

      - name: Build .NET Framework project
        run: |
          msbuild .\EmailLibraryDesktop\EmailLibrary.sln /p:Configuration=Release /p:Platform="Any CPU" /p:TargetFrameworkVersion="v4.7.2"

      - name: Create release directories
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          mkdir release
          mkdir .\release\EmailModule
          mkdir .\release\EmailModule\$version
          mkdir .\release\EmailModule\$version\lib
          mkdir .\release\EmailModule\$version\lib\Core
          mkdir .\release\EmailModule\$version\lib\Desktop

      - name: Copy .NET Framework build output to lib Desktop directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          Get-ChildItem -path ".\EmailLibraryDesktop\EmailLibrary\bin\Release\" -Recurse -Exclude "*.pdb" | ForEach-Object {
            Copy-Item $_ -Destination ".\release\EmailModule\$version\lib\Desktop\"
          }

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies .NET Core Build
        run: dotnet restore .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj

      - name: Build .NET Core project
        run: dotnet build .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj --configuration Release --no-restore

      - name: Publish .NET Core project
        run: dotnet publish .\EmailLibraryCore\EmailLibrary\EmailLibrary.csproj --configuration Release --no-restore --output publish
        env:
            PublishRelease: true

      - name: Copy .NET Core publish output to lib Core directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          Get-ChildItem -path ".\publish\" -Exclude "*.pdb" | Where-Object Attributes -ne Directory | ForEach-Object {
            Copy-Item $_ -Destination ".\release\EmailModule\$version\lib\Core\"
          }

      - name: Generate Powershell Manifest
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''

          $files = @('.\EmailModule.psd1','.\EmailModule.psm1','.\EmailModule.Libraries.ps1',".\EmailModule.nuspec",".\EmailModule.$version.nupkg")
          Get-ChildItem -Path ".\release\EmailModule\$version\" -Recurse -File | ForEach-Object { 
              $files += $_.FullName.ToString().Replace("D:\a\Powershell_Email-Module\Powershell_Email-Module\release\EmailModule\$version",'.') 
          }

          $moduleSettings = @{
            Path = '.\EmailModule\EmailModule.psd1'

            # Script module or binary module file associated with this manifest.
            RootModule = 'EmailModule.psm1'

            # Version number of this module.
            ModuleVersion = $version

            # Supported PSEditions
            CompatiblePSEditions = @('Desktop','Core')

            # ID used to uniquely identify this module
            GUID = '6f8c4c8a-6e0d-4139-836c-f798b30ada92'

            # Author of this module
            Author = 'Brandon Navarro'

            # Company or vendor of this module
            CompanyName = 'None'

            # Copyright statement for this module
            Copyright = '(c) Brandon Navarro. All rights reserved.'

            # Description of the functionality provided by this module
            Description = 'Powershell Module to send Email using MailKit, MimeKit and STARTTLS'

            # Minimum version of the PowerShell engine required by this module
            PowerShellVersion = '5.1'

            # Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
            DotNetFrameworkVersion = '4.7.2'

            # Processor architecture (None, X86, Amd64) required by this module
            ProcessorArchitecture = 'None'

            # Script files (.ps1) that are run in the caller's environment prior to importing this module.
            ScriptsToProcess = @('EmailModule.Libraries.ps1')

            # Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
            FunctionsToExport = 'Send-Email'

            # Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
            CmdletsToExport = 'Send-Email'

            # Variables to export from this module
            VariablesToExport = @()

            # Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
            AliasesToExport = @()

            # List of all files packaged with this module
            FileList = $files

            # Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
            Tags        = @('Desktop','Core','Email','StartTLS')
            LicenseUri  = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module/blob/main/LICENSE'
            ProjectUri  = 'https://github.com/Brandon-J-Navarro/Powershell_Email-Module'
            IconUri     = 'https://github.com/Brandon-J-Navarro/'
          }
          New-ModuleManifest @moduleSettings

      - name: Copy powershell module to release directory
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          Copy-Item -Path ".\EmailModule\EmailModule.Libraries.ps1" -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\EmailModule\EmailModule.psd1" -Destination ".\release\EmailModule\$version\"
          Copy-Item -Path ".\EmailModule\EmailModule.psm1" -Destination ".\release\EmailModule\$version\"

      - name: Generate nuspec
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
            <metadata>
              <id>EmailModule</id>
              <version>$version</version>
              <title>EmailModule</title>
              <authors>Brandon Navarro</authors>
              <owners>Brandon Navarro</owners>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <licenseUrl>https://github.com/Brandon-J-Navarro/Powershell_Email-Module/blob/main/LICENSE</licenseUrl>
              <projectUrl>https://github.com/Brandon-J-Navarro/Powershell_Email-Module</projectUrl>
              <description>Powershell Module to send Email using MailKit, MimeKit and STARTTLS</description>
              <summary>A brief summary of your module.</summary>
              <releaseNotes>Initial release with feature X and bug fix Y.</releaseNotes>
              <copyright>(c) Brandon Navarro. All rights reserved.</copyright>
              <tags>Desktop Core Email StartTLS</tags>
            </metadata>
            <files>
              <file src=".\*" target="modules\EmailModule" />
            </files>
          </package>
          "@ | Out-File -FilePath ".\release\EmailModule\$version\EmailModule.nuspec"

      - name: Build NuGet Package
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          nuget pack .\release\EmailModule\$version\EmailModule.nuspec

      - name: Publish NuGet Package
        run: |
          $version = '${{ steps.tag_version.outputs.new_tag }}'
          $version = $version  -replace 'v', ''
          $version = $version  -replace "-working.*", ''
          Copy-Item -Path ".\EmailModule.$version.nupkg" -Destination ".\release\EmailModule\$version\"
          New-Item -ItemType Directory -Path 'artifact' | Out-Null;
          Copy-Item -Recurse -Force .\release\EmailModule\$version\* .\artifact\
          Get-ChildItem -path ".\artifact\" -Recurse -File | ForEach-Object {
            Get-FileHash -LiteralPath $_.FullName -Algorithm SHA256 | FL | Out-File -FilePath ".\artifact\Hashes.txt" -Append
          }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: EmailModule
          path: artifact/
          if-no-files-found: error

  # NEW: Pester Unit Tests Job
  pester-tests:
    environment: Build and Test PowerShell Module
    runs-on: ${{ matrix.os }}
    name: Pester Tests on ${{ matrix.os }}
    needs: build
    if: always()
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            shell: pwsh
          - os: ubuntu-latest
            shell: pwsh
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: EmailModule
          path: EmailModule

      - name: Install Pester
        shell: pwsh
        run: |
          if (Get-Module -ListAvailable -Name Pester) {
            Write-Host "Pester is already installed"
            Get-Module -ListAvailable -Name Pester | Select-Object Name, Version
          } else {
            Write-Host "Installing Pester..."
            Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          }
          
          # Ensure we have the latest version
          Import-Module Pester -Force
          $PesterVersion = (Get-Module Pester).Version
          Write-Host "Pester version: $PesterVersion"

      - name: Run Pester Tests
        shell: pwsh
        run: |
          # Copy module files to current directory for testing
          Copy-Item -Path ".\EmailModule\*" -Destination ".\" -Recurse -Force
          
          # Define test files to run
          $TestFiles = @(
            '.\tests\EmailModule.Tests.ps1',
            '.\tests\EmailModule.Libraries.Tests.ps1',
            '.\tests\EmailModule.Integration.Tests.ps1'
          )
          
          # Check which test files exist
          $ExistingTestFiles = @()
          foreach ($TestFile in $TestFiles) {
            if (Test-Path $TestFile) {
              $ExistingTestFiles += $TestFile
              Write-Host "✅ Found test file: $TestFile" -ForegroundColor Green
            } else {
              Write-Host "⚠️  Test file not found: $TestFile" -ForegroundColor Yellow
            }
          }
          
          if ($ExistingTestFiles.Count -eq 0) {
            Write-Host "❌ No test files found!" -ForegroundColor Red
            exit 1
          }
          
          # Set up the test configuration
          $PesterConfig = @{
            Run = @{
              Path = $ExistingTestFiles
              PassThru = $true
            }
            Output = @{
              Verbosity = 'Detailed'
            }
            TestResult = @{
              Enabled = $true
              OutputFormat = 'NUnitXml'
              OutputPath = 'TestResults.xml'
            }
            CodeCoverage = @{
              Enabled = $true
              Path = @('.\EmailModule.psm1', '.\EmailModule.Libraries.ps1')
              OutputFormat = 'JaCoCo'
              OutputPath = 'coverage.xml'
            }
          }
          
          # Run the tests
          Write-Host "Running Pester tests..." -ForegroundColor Cyan
          Write-Host "Test files: $($ExistingTestFiles -join ', ')" -ForegroundColor White
          
          $Results = Invoke-Pester -Configuration $PesterConfig
          
          # Output test summary
          Write-Host "`n📊 Test Results Summary:" -ForegroundColor Green
          Write-Host "════════════════════════" -ForegroundColor Green
          Write-Host "Total Tests: $($Results.TotalCount)" -ForegroundColor White
          Write-Host "Passed: $($Results.PassedCount)" -ForegroundColor Green
          Write-Host "Failed: $($Results.FailedCount)" -ForegroundColor Red
          Write-Host "Skipped: $($Results.SkippedCount)" -ForegroundColor Yellow
          Write-Host "Duration: $($Results.Duration)" -ForegroundColor White
          
          # Show failed tests details if any
          if ($Results.FailedCount -gt 0) {
            Write-Host "`n❌ Failed Tests:" -ForegroundColor Red
            Write-Host "═══════════════" -ForegroundColor Red
            foreach ($FailedTest in $Results.Failed) {
              Write-Host "  • $($FailedTest.ExpandedPath)" -ForegroundColor Red
              Write-Host "    $($FailedTest.ErrorRecord.Exception.Message)" -ForegroundColor DarkRed
            }
            Write-Host "`n❌ Some tests failed!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "`n✅ All tests passed!" -ForegroundColor Green
          }

      - name: Upload Pester Test Results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: pester-test-results-${{ matrix.os }}
          path: |
            TestResults.xml
            coverage.xml

  # NEW: Windows Desktop PowerShell Pester Tests
  pester-tests-desktop:
    environment: Build and Test PowerShell Module
    runs-on: windows-latest
    name: Pester Tests on Windows PowerShell Desktop
    needs: build
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: EmailModule
          path: EmailModule

      - name: Install Pester (Desktop)
        shell: powershell
        run: |
          if (Get-Module -ListAvailable -Name Pester) {
            Write-Host "Pester is already installed"
            Get-Module -ListAvailable -Name Pester | Select-Object Name, Version
          } else {
            Write-Host "Installing Pester..."
            Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          }
          
          Import-Module Pester -Force
          $PesterVersion = (Get-Module Pester).Version
          Write-Host "Pester version: $PesterVersion"
          Write-Host "PowerShell Edition: $PSEdition"

      - name: Run Pester Tests (Desktop)
        shell: powershell
        run: |
          # Copy module files to current directory for testing
          Copy-Item -Path ".\EmailModule\*" -Destination ".\" -Recurse -Force
          
          # Define test files to run
          $TestFiles = @(
            '.\tests\EmailModule.Tests.ps1',
            '.\tests\EmailModule.Libraries.Tests.ps1',
            '.\tests\EmailModule.Integration.Tests.ps1'
          )
          
          # Check which test files exist
          $ExistingTestFiles = @()
          foreach ($TestFile in $TestFiles) {
            if (Test-Path $TestFile) {
              $ExistingTestFiles += $TestFile
              Write-Host "✅ Found test file: $TestFile" -ForegroundColor Green
            } else {
              Write-Host "⚠️  Test file not found: $TestFile" -ForegroundColor Yellow
            }
          }
          
          if ($ExistingTestFiles.Count -eq 0) {
            Write-Host "❌ No test files found!" -ForegroundColor Red
            exit 1
          }
          
          # Run the tests (using older Pester syntax for compatibility with Desktop)
          Write-Host "Running Pester tests on PowerShell Desktop..." -ForegroundColor Cyan
          Write-Host "Test files: $($ExistingTestFiles -join ', ')" -ForegroundColor White
          
          $Results = Invoke-Pester -Path $ExistingTestFiles -OutputFormat NUnitXml -OutputFile 'TestResults-Desktop.xml' -PassThru -Verbose
          
          # Output test summary
          Write-Host "`n📊 Test Results Summary (Desktop):" -ForegroundColor Green
          Write-Host "════════════════════════════════" -ForegroundColor Green
          Write-Host "Total Tests: $($Results.TotalCount)" -ForegroundColor White
          Write-Host "Passed: $($Results.PassedCount)" -ForegroundColor Green
          Write-Host "Failed: $($Results.FailedCount)" -ForegroundColor Red
          Write-Host "Skipped: $($Results.SkippedCount)" -ForegroundColor Yellow
          Write-Host "PowerShell Edition: $PSEdition" -ForegroundColor Cyan
          
          # Show failed tests details if any
          if ($Results.FailedCount -gt 0) {
            Write-Host "`n❌ Failed Tests:" -ForegroundColor Red
            Write-Host "═══════════════" -ForegroundColor Red
            foreach ($FailedTest in $Results.TestResult | Where-Object {$_.Result -eq "Failed"}) {
              Write-Host "  • $($FailedTest.Name)" -ForegroundColor Red
              Write-Host "    $($FailedTest.FailureMessage)" -ForegroundColor DarkRed
            }
            Write-Host "`n❌ Some tests failed!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "`n✅ All tests passed!" -ForegroundColor Green
          }

      - name: Upload Pester Test Results (Desktop)
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: pester-test-results-desktop
          path: TestResults-Desktop.xml

  # Modified: Integration Tests (your existing test jobs)
  test:
    environment: Build and Test PowerShell Module
    runs-on: ${{ matrix.os }}
    name: Integration Test on ${{ matrix.os }}
    needs: [build, pester-tests]  # Now depends on Pester tests passing
    if: always()
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    env:
      OUTPUT1: ${{ needs.build.outputs.new_tag }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: EmailModule
          path: EmailModule

      - name: Verify module manifest
        shell: pwsh
        run: |
          Test-ModuleManifest -Path '.\EmailModule\EmailModule.psd1'

      - name: Integration Test Module
        shell: pwsh
        run: |
          $Linux = $IsLinux
          $MacOS = $IsMacOS
          $Windows = $IsWindows
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Brandon Navarro"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "Brandon Navarro"
          $Subject = "Github Actions ${{ needs.build.outputs.new_tag }} ${{ matrix.os }} PSEdition: $PSEdition - Integration Test"
          $Body = "
            Integration Test - Email Module
  
            Linux: $Linux
            MacOS: $MacOS
            Windows: $Windows
            PSEdition: $PSEdition
  
            This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }}
            Unit tests have passed ✅
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          $ServerPort = "587"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer -SmtpPort $ServerPort

  windows_test:
    environment: Build and Test PowerShell Module
    runs-on: windows-latest
    name: Integration Test on Windows Desktop
    needs: [build, pester-tests-desktop]  # Now depends on Desktop Pester tests passing
    if: always()
    env:
      OUTPUT1: ${{ needs.build.outputs.new_tag }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: EmailModule
          path: EmailModule

      - name: Integration Test Module with PowerShell Desktop
        shell: powershell
        run: |
          Import-Module .\EmailModule\EmailModule.psm1
          $AuthUser = "${{ secrets.AUTHUSER }}"
          $AuthPass = "${{ secrets.AUTHPASS }}"
          $To = "${{ secrets.TO }}"
          $ToName = "Brandon Navarro"
          $From = "${{ secrets.AUTHUSER }}"
          $FromName = "Brandon Navarro"
          $Subject = "Github Actions ${{ needs.build.outputs.new_tag }} windows-latest PSEdition: $PSEdition - Integration Test"
          $Body = "
            Integration Test - dotNET Framework Email Module
  
            PSEdition: $PSEdition
  
            This is a GitHub Actions Automated Integration Test ${{ needs.build.outputs.new_tag }}
            Unit tests have passed ✅
          "
          $MailServer = "${{ secrets.MAILSERVER }}"
          $ServerPort = "587"
          Send-Email -AuthUser $AuthUser -AuthPass $AuthPass `
              -EmailTo $To -EmailToName $ToName `
              -EmailFrom $From -EmailFromName $FromName `
              -Subject $Subject -Body $Body `
              -SmtpServer $MailServer -SmtpPort $ServerPort

  # NEW: Test Report Summary
  test-summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [pester-tests, pester-tests-desktop, test, windows_test]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v5.0.0
        with:
          pattern: pester-test-results-*
          merge-multiple: true

      - name: Generate Test Summary
        run: |
          echo "# 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Unit Tests (Pester)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Files Executed:" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 EmailModule.Tests.ps1 (Main module tests)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 EmailModule.Libraries.Tests.ps1 (Library loading tests)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 EmailModule.Integration.Tests.ps1 (Integration tests)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "TestResults.xml" ]; then
            echo "✅ PowerShell Core tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "TestResults-Desktop.xml" ]; then
            echo "✅ PowerShell Desktop tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "coverage.xml" ]; then
            echo "📊 Code coverage report generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cross-platform integration tests completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Email sending functionality verified" >> $GITHUB_STEP_SUMMARY
          echo "✅ Real SMTP server integration tested" >> $GITHUB_STEP_SUMMARY
